const { handler } = require('../index');
const debug = require('debug')('koa:server');
const http = require('http');

/**
 * Create HTTP server.
 */

const server = http.createServer((req, res, context) => {
  req.path = req.url
  handler(req, res, context)
});

let port = process.env.PORT || '3000'
server.listen(port, () => {
  console.log('App listen on http://localhost:' + port)
});
server.on('error', onError);
server.on('listening', onListening);

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}